#include <iostream>
#include <string>

using namespace std;

class SocioClub {
private:
    int NumeroSocio;
    string NombreSocio;
    string Domicilio;
    int AnioIngreso;

public:
    SocioClub(int num = 0, string nombre = "", string domicilio = "", int anio = 0)
        : NumeroSocio(num), NombreSocio(nombre), Domicilio(domicilio), AnioIngreso(anio) {}

//acceso
    int getNumeroSocio() const { return NumeroSocio; }
    string getNombreSocio() const { return NombreSocio; }
    string getDomicilio() const { return Domicilio; }
    int getAnioIngreso() const { return AnioIngreso; }

    bool operator<(const SocioClub& other) const {
        return NumeroSocio < other.NumeroSocio;
    }

    friend ostream& operator<<(ostream& os, const SocioClub& socio) {
        os << "Numero de Socio: " << socio.NumeroSocio << "\nNombre: " << socio.NombreSocio
           << "\nDomicilio: " << socio.Domicilio << "\nAño de Ingreso: " << socio.AnioIngreso << endl;
        return os;
    }
};

template<class T>
class LSLSE;

template<class T>
class node {
private:
    T data;
    node<T>* sig;
public:
    node() : sig(nullptr) {}

    T getData() const { return data; }

    friend class LSLSE<T>;
};

template<class T>
class LSLSE {
private:
    node<T>* lista;
public:
    LSLSE() : lista(nullptr) {}
    bool vacia() const;
    node<T>* ultimo() const;
    node<T>* primero() const;
    node<T>* anterior(node<T>* pos) const;
    void insertarOrdenado(T elem);
    bool eliminar(node<T>* pos);
    node<T>* buscar(int numSocio) const;
    node<T>* buscarPorNombreYDom(string nombre, string domicilio) const;
    void imprimir() const;
    int contar() const;
};

// Implementacion de LSLSE
template<class T>
bool LSLSE<T>::vacia() const {
    return lista == nullptr;
}

template<class T>
node<T>* LSLSE<T>::ultimo() const {
    if (vacia()) return nullptr;
    node<T>* aux = lista;
    while (aux->sig != nullptr) {
        aux = aux->sig;
    }
    return aux;
}

template<class T>
node<T>* LSLSE<T>::primero() const {
    return lista;
}

template<class T>
node<T>* LSLSE<T>::anterior(node<T>* pos) const {
    if (vacia() || pos == nullptr) return nullptr;
    node<T>* aux = lista;
    while (aux->sig != pos) {
        aux = aux->sig;
    }
    return aux;
}
//insertar y ordenar socios
template<class T>
void LSLSE<T>::insertarOrdenado(T elem) {
    node<T>* nuevo = new node<T>;
    nuevo->data = elem;

    if (vacia() || elem < lista->data) {
        nuevo->sig = lista;
        lista = nuevo;
    } else {
        node<T>* aux = lista;
        while (aux->sig != nullptr && aux->sig->data < elem) {
            aux = aux->sig;
        }
        nuevo->sig = aux->sig;
        aux->sig = nuevo;
    }
}

template<class T>
bool LSLSE<T>::eliminar(node<T>* pos) {
    if (vacia() || pos == nullptr) return false;
    if (pos == lista) {
        lista = lista->sig;
    } else {
        node<T>* ant = anterior(pos);
        if (ant != nullptr) {
            ant->sig = pos->sig;
        }
    }
    delete pos;
    return true;
}

template<class T>
node<T>* LSLSE<T>::buscar(int numSocio) const {
    node<T>* aux = lista;
    while (aux != nullptr) {
        if (aux->getData().getNumeroSocio() == numSocio) {
            return aux;
        }
        aux = aux->sig;
    }
    return nullptr;
}

template<class T>
node<T>* LSLSE<T>::buscarPorNombreYDom(string nombre, string domicilio) const {
    node<T>* aux = lista;
    while (aux != nullptr) {
        if (aux->getData().getNombreSocio() == nombre && aux->getData().getDomicilio() == domicilio) {
            return aux;
        }
        aux = aux->sig;
    }
    return nullptr;
}

template<class T>
void LSLSE<T>::imprimir() const {
    node<T>* aux = lista;
    while (aux != nullptr) {
        cout << aux->getData() << "-------------------" << endl;
        aux = aux->sig;
    }
}

template<class T>
int LSLSE<T>::contar() const {
    int total = 0;
    node<T>* aux = lista;
    while (aux != nullptr) {
        total++;
        aux = aux->sig;
    }
    return total;
}

void menu() {
    LSLSE<SocioClub> listaSocios;
    int opcion;
    do {
        cout << "\n--- Menu ---\n";
        cout << "1. Registrar nuevo socio\n";
        cout << "2. Dar de baja a un socio\n";
        cout << "3. Buscar socio por nombre y domicilio\n";
        cout << "4. Generar reporte de todos los socios\n";
        cout << "5. Calcular total de socios e imprimir todos los socios\n";
        cout << "6. Salir\n";
        cout << "Elija una opcion: ";
        cin >> opcion;

        if (opcion == 1) {
            int numero, anio;
            string nombre, domicilio;
            cout << "Ingrese numero de socio: ";
            cin >> numero;
            if (listaSocios.buscar(numero) != nullptr) {
                cout << "Ya existe un socio con ese numero.\n";
            } else {
                cout << "Ingrese nombre: ";
                cin.ignore();
                getline(cin, nombre);
                cout << "Ingrese domicilio: ";
                getline(cin, domicilio);
                cout << "Ingrese año de ingreso: ";
                cin >> anio;
                SocioClub nuevoSocio(numero, nombre, domicilio, anio);
                listaSocios.insertarOrdenado(nuevoSocio); // Se inserta de forma ordenada
                cout << "Socio registrado correctamente.\n";
            }
        } else if (opcion == 2) {
            int numero;
            cout << "Ingrese numero de socio a eliminar: ";
            cin >> numero;
            node<SocioClub>* socioEliminar = listaSocios.buscar(numero);
            if (socioEliminar != nullptr) {
                listaSocios.eliminar(socioEliminar);
                cout << "Socio eliminado correctamente.\n";
            } else {
                cout << "No se encontro el socio.\n";
            }
        } else if (opcion == 3) {
            string nombre, domicilio;
            cout << "Ingrese nombre del socio: ";
            cin.ignore();
            getline(cin, nombre);
            cout << "Ingrese domicilio del socio: ";
            getline(cin, domicilio);
            node<SocioClub>* socio = listaSocios.buscarPorNombreYDom(nombre, domicilio);
            if (socio != nullptr) {
                cout << "\n Socio encontrado:\n";
                cout << socio->getData();
            } else {
                cout << "No se encontro ningun socio con esos datos.\n";
            }
        } else if (opcion == 4) {
            cout << "Reporte de todos los socios:\n";
            listaSocios.imprimir();
        } else if (opcion == 5) {
            cout << "Total de socios registrados: " << listaSocios.contar() << endl;
        }
    } while (opcion != 6);
}

int main() {
    menu();
    return 0;
}
